[
  {
    "step": "1",
    "content": {
      "title": "Setup: Install Aurora",
      "content": [
        " You use the Aurora client and web UI to interact with Aurora jobs. ",
        " To install it locally, see ",
        " <a href='http://aurora.apache.org/documentation/latest/vagrant/'>vagrant.md</a> ",
        " The remainder of this Tutorial assumes you are running ",
        " Aurora using Vagrant. Unless otherwise stated, ",
        " all commands are to be run from the root ",
        " of the aurora repository clone. "
      ],
      "tips": "let's try with following commands",
      "commands": [
        {"command":"git clone git://git.apache.org/aurora.git"},
        {"command":"cd aurora/"},
        {"command":"vagrant up"}
      ]
    }
  },
  {
    "step": "2",
    "content": {
      "title": "Initial Configuration",
      "content": [
        " <h3>The Script</h3> ",
        " Our 'hello world' application is a simple Python script that loops ",
        " forever, displaying the time every few seconds. <br/><br/> ",
        " The script has an intentional bug, which we will explain later on. ",
        " <h3>Aurora Configuration</h3> ",
        " Once we have our script/program, we need to create a ",
        " <i>configuration file</i> that tells Aurora how to manage and launch our Job. "
      ],
      "tips": " Open the files ",
      "commands": [
        {"command":"nano hello_world.py"},
        {"command":"hello_world.aurora"}
      ]
    }
  },
  {
    "step": "3",
    "content": {
      "title": "Creating the Job",
      "content": [
        " We’re ready to launch our job! To do so, we use the Aurora Client to issue a  ",
        " Job creation request to the Aurora scheduler. <br/><br/> ",
        " Many Aurora Client commands take a job key argument, which uniquely identifies a Job. ",
        " A job key consists of four parts, each separated by a “/”. The four parts are ",
        " <code>&lt;cluster&gt;/&lt;role&gt;/&lt;environment&gt;/&lt;jobname&gt;</code> ",
        " in that order. When comparing two job keys, if any of the four parts is ",
        " different from its counterpart in the other key, then the two job keys identify ",
        " two separate jobs. If all four values are identical, the job keys identify the same job. <br/> ",
        " <code>/etc/aurora/clusters.json</code> within the Aurora scheduler has the available cluster names. ",
        " For Vagrant, from the top-level of your Aurora repository clone, do: "
      ],
      "tips": "Run these commands",
      "commands": [
        {"command":"vagrant ssh"},
        {"command":"cat /etc/aurora/clusters.json"},
        {"command":"aurora job create devcluster/www-data/devel/hello_world /vagrant/hello_world.aurora"}
      ]
    }
  },
  {
    "step": "4",
    "content": {
      "title": "Watching the Job Run",
      "content": [
        " Now that our job is running, let’s see what it’s doing. Access the scheduler ",
        " web interface at <code>http://$scheduler_hostname:$scheduler_port/scheduler</code> ",
        " Or when using <code>vagrant</code> <code>http://192.168.33.7:8081/scheduler</code> ",
        " First we see what Jobs are scheduled "
      ],
      "tips": "Correct hello_world.py",
      "commands": [
        {"command":"aurora job create devcluster/www-data/devel/hello_world /vagrant/hello_world.aurora"}
      ]
    }
  },
  {
    "step": "5",
    "content": {
      "title": "Cleanup",
      "content": [
        " Now that we’re done, we kill the job using the Aurora client "
      ],
      "tips": "Run this command",
      "commands": [
        {"command":"aurora job killall devcluster/www-data/devel/hello_world"}
      ]
    }
  }
]
